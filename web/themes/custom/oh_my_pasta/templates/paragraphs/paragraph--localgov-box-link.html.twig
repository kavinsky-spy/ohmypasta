{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{#
  We are setting a variable here for the parent entity. We can then use that to
  check what heading level is set in the parent
  Using this, we can then set our heading to be one level below the parent's heading.
#}
{% set parent = paragraph._referringItem.parent.parent.entity %}
{% set parent_heading_level = parent.localgov_heading_level.value|split('h')[1] %}

{# Default heading level to H2 #}
{% set heading_level = '2' %}

{# Override heading level if parent paragraph exists #}
{% if parent_heading_level %}
  {% if parent_heading_level == 6 %}
    {% set heading_level = 6 %}
  {% else %}
    {% set heading_level = parent_heading_level + 1 %}
  {% endif %}
{% endif %}

{% embed "@molecules/tile/tile.twig" with {
  tile_heading: localgov_link.title,
  tile_heading_level: heading_level,
  tile_url: localgov_link.url,
  tile_url_new_window: localgov_link.open_in_new_window,
  tile_icon: content.localgov_image.0,
} %}
  {% block tile_icon_block %}
    {{ content.localgov_image }}
  {% endblock %}
{% endembed %}
